version: '3.8'
services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init_data:/import_data
    networks:
      - bigdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-labuser}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  spark-master:
    build:
      context: .
      dockerfile: ./spark/Dockerfile
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_NO_DAEMONIZE=yes
      - SPARK_MASTER_OPTS=-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=zookeeper:2181
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./spark:/opt/spark-apps
      - ./jars:/opt/spark/jars
    depends_on:
      postgres:
        condition: service_healthy
      zookeeper:
        condition: service_started
    networks:
      - bigdata

  spark-worker:
    build:
      context: .
      dockerfile: ./spark/Dockerfile
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_NO_DAEMONIZE=yes
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2G
    depends_on:
      - spark-master
    volumes:
      - ./spark:/opt/spark-apps
      - ./jars:/opt/spark/jars
    networks:
      - bigdata

  clickhouse:
    image: yandex/clickhouse-server:latest
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - bigdata
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  cassandra:
    image: cassandra:4.0
    ports:
      - "9042:9042"
    networks:
      - bigdata

  mongodb:
    image: mongo:5.0
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - bigdata
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:5.18
    container_name: my-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: ${NEO4J_USER}/${NEO4J_PASSWORD}

    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - bigdata

volumes:
  pgdata:
  mongo_data:
  neo4j_data:
  neo4j_logs:
  cassandra_data:
  clickhouse_data:
  
networks:
  bigdata:
    driver: bridge
